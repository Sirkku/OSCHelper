from __future__ import annotations

from src.vrc_osc import OSCValueType


class AvatarParam:
    """
    Holds values from the VRChat generated OSC info files. Names are based on the property names used in the file,
    so in/out is from the view of VRChat.
    """
    def __init__(self):
        super().__init__()
        # default values for json data
        self.name = ""
        """
        This is the name of the property as defined during avatar making. 
        """
        self.translation = ""
        """
        This value is generated by the program and not provided by VRChat 
        """
        self.input_address = ""
        """
        [Can be empty string]
        This is the OSC path to send to VRChat. If it is empty, then VRC doesn't accept OSC messages for it. Currently,
        this means that this avatar parameter is not defined by the avatar creator, but created by the system.
        This includes basic avatar properties like moving around and all physbone derived parameters like _isGrabbed
        """
        self.output_address = ""
        """
        [Can be empty string]
        This is the OSC path to receive updates from VRChat.
        """
        self.osc_type = OSCValueType.UNDEFINED
        self.value: int | float | bool = 0.0
        self.selected: bool = False

    def load_from_json(self, json_data):
        if j_name := json_data.get('name'):
            self.name = j_name
        if j_input := json_data.get('input'):
            if j_in_add := j_input.get('address'):
                self.input_address = j_in_add
            if j_in_type := j_input.get('type'):
                self.osc_type = j_in_type
        if j_output := json_data.get('output'):
            if j_out_addr := j_output.get('address'):
                self.output_address = j_out_addr
            if j_out_type := j_output.get('type'):
                self.osc_type = j_out_type

        # calculate values
        self.value = {
            OSCValueType.INT: int(0),
            OSCValueType.FLOAT: 0.0,
            OSCValueType.BOOL: False
        }.get(self.osc_type, 0.0)
